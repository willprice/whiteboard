<div class="textual-content">
    <h1>CollaBoard Report (wp13824)</h1>
    <section>
        <p><a href="https://collaborative-whiteboard.herokuapp.com/">CollaBoard</a> (pronounced like a
            contraction of collaborative whiteboard) is a collaborative whiteboard tool
            produced by Will Price (wp13824/64496) alone. CollaBoard allows you to draw on a virtual whiteboard, save
            those drawings (implemented), retrived those drawings (not implemented) and collaborate on them with others
            (not implemented).</p>

        <p>NOTE: The collaborative aspect is still in progress and hasn't been implemented yet</p>
        <p><a href="https://www.cs.bris.ac.uk/Teaching/Resources/COMSM0104/cw/assign5/">Marking guidelines</a></p>

        <p>In approaching the assignment I had the choice of using frameworks I'd previously used, try new frameworks,
            or try the vanilla approach: use as few frameworks as possible. As a learning exercise I elected to write as
            much as possible relying on few libraries for features as I have previously written websites using WebMVC,
            KnockoutJS etc and I was intrigued by the implication from the lectures that web standards are now good
            enough that we can use native APIs instead of jquery.  With this in mind, my application only targets new
            browsers. I have no interest in supporting anything too old to support the WebSockets API, ever-green browsers
            have now enabled this approach.
        </p>
    </section>

    <section>
        <h1>HTML</h1>

        <p>The website is written in exclusively in HTML5, sadly not XHTML5 (as I agree that XHTML is a good idea)
            due to the use of the Google sign-in JS API that injects HTML valid in HTML5, but not in XHTML.</p>

        <h2>HTML5 Validation</h2>
        <p>I believe HTML validation is an important topic to be addressed by a high-quality website. If HTML is no
            complaint then we end up with horrors like quirks-mode. To ensure my website is HTML5-complaint I used
            the VNU HTML validator (the same as used by the W3C in their validation service). I wrote a node module
            to create a Mocha test-suite fetching each page specified in a remote sitemap.xml file, run the page
            through the VNU validator and report errors. I set up travis CI to run this script on git check-in to
            ensure my site always remained HTML complaint if it wasn't it wouldn't be deployed to Heroku. Travis
            test results can be found <a href="https://travis-ci.org/willprice/whiteboard">here</a> (look back
            through the history to see some cases where it has picked up invalid HTML use!).</p>

        <h2>Templating</h2>
        <p>I chose to EJS for templating HTML. The use of templating is primarily to DRY up repetitious snippets of
            HTML. Pages are all included in a master page template that has a header and footer giving consistent
            branding to the website. The Head of the master page template is parameterised so that one can inject new
            scripts and and stylesheets if so needed by pages. I do also use EJS on the front end to create the
            gallery of boards for a user, due to EJS's poor support for client side use, I ended up having to
            serialise the raw templates on the backend and inject them into the HTML as script tags with type
            <code>text/template</code> (which the browser ignores), I then can get a handle on them in my client side
            JS and render them.
        </p>

        <h2>Files of interest</h2>
        <ul>
            <li><a href="/view-src/server/validate_html.js">validate_html.js</a> - Dynamic test suite for HTML
                validation based on sitemap.xml</li>
        </ul>

        <h2>Resources used</h2>
        <ul>
            <li><a href="https://developer.mozilla.org/en/docs/Web/HTML">MDN HTML reference</a></li>
            <li><a href="https://jsfiddle.net">JS Fiddle</a> - testing out idioms and prototyping</li>
        </ul>
    </section>


    <section>
        <h1>CSS</h1>

        <p>Pretty much all the CSS was written from the ground up. Following the BEM philosophy I isolate stylings
            for specific components in their own files. I made heavy use of CSS3 features like flex-box and
            border-radius.
        </p>

        <p>The slide-show styling takes significant inspiration from
            <a href="https://www.w3schools.com/w3css/w3css_slideshow.asp">that on W3Schools</a>.</p>

        <h2>Organising CSS: BEM to the rescue</h2>
        <p>The cascade in CSS can be a monstrosity, and I believe it's a fundamentally flawed styling model. To begin
            with, sites start small and developing with the cascade is pleasant, but as time passes and a
            site grows then you start to experience situations where you start inheriting styles from elements you
            don't wish to, it can feel a bit like this video...
        </p>
        <div class="_center-container">
        <video class="_centered" src="https://video.twimg.com/tweet_video/C9oiOtjVYAIvk-5.mp4" controls
               autoplay
        loop></video>
        </div>
        <p>Current I favour the <a href="getbem.com/">BEM</a> methodology as it forces the use of CSS to style
            components, completely avoiding the use of the cascade. Each UI component has its own corresponding style
            file in <code>/styles/components</code>
        </p>

        <p>
            When
            <a href="https://www.webcomponents.org/">Web components</a> are implemented by the major browsers I
            intend to switch to them instead; I believe components should consist of JS/HTML/CSS bundled all
            together, quite the opposite of the philosophy outlined in the lectures. This opinion applies
            strictly to rich webapps because we're bending HTML into a tool for something very different from its
            original purpose it makes sense to step back and think "do these practices apply to this (webapp) style of
            development?", there is no progressive enhancement in my app; you either have <code>canvas</code> support
            (in which case you're using a modern browser), or you don't.
        </p>
        <p>As the delightful
            <a href="https://csswizardry.com/2015/03/more-transparent-ui-code-with-namespaces/">Harry Roberts</a>
            says "...because writing CSS is easy; looking after it is not.", I want components, not a tightly coupled
            mess of styling.
        </p>

        <h2>Files of interest</h2>
        <ul>
            <li><a href="/view-src/server/setup_db.sql">setup_db.sql</a> - Defines tables for database</li>
            <li><a href="/view-src/server/setup_db.sql">setup_db.sql</a> - Defines tables for database</li>
        </ul>

        <h2>Resources used</h2>
        <ul>
            <li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS">MDN CSS reference</a></li>
            <li><a href="https://jsfiddle.net">JS Fiddle</a> - testing out idioms and prototyping</li>
        </ul>
    </section>


    <section>
        <h1>JS</h1>
        <p>I have put a huge amount of effort into the JS, trying to write as much of it from scratch leveraging web
            APIs as possible. The code is written adhering to the ES6 standard so I get to use lots of nice features,
            like:
        </p>
        <ul>
            <li>Promises</li>
            <li>let, const</li>
            <li>destructuring</li>
            <li>template strings</li>
            <li>arrow functions</li>
            <li>Class syntax</li>
            <li>for .. of</li>
            <li>for .. in</li>
            <li>... splat operator</li>
            <li>Set/Map</li>
        </ul>
        <p>I used all of the above across the site, ES6 is tolerable to develop in, unlike ES5! The backend makes
            extensive use of promises as the repositories wrapping database access return promises and since they're
            at the bottom of the caller hierarchy everything calling them needs to operate asynchronously (see the
            excellent <a href="http://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/">red vs blue
                functions article</a>).
        </p>
        <p>I used <a href="https://standardjs.com/">Standard</a>, a JS style guide enforcer (a linting tool based on
            ESLint) to ensure consistent use of the language. I set up git-commit hooks to run standard on commit and
            reject commits that weren't adhering to the standard style guide forcing me to follow it!
        </p>

        <h2>Files of interest</h2>
        <ul>
            <li><a href="/view-src/public/client/ui/whiteboard_ui.js">whiteboard_ui.js</a> -
                Whiteboard UI controller</li>
            <li><a href="/view-src/public/client/whiteboard_connection.js">whiteboard_connection.js</a> - Manages
                WebSocket connection to server</li>
        </ul>

        <h2>Resources used</h2>
        <ul>
            <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript">MDN JS reference</a></li>
            <li><a href="https://jsfiddle.net">JS Fiddle</a> - testing out idioms and prototyping</li>
        </ul>
    </section>


    <section>
        <h1>PNG</h1>
        <p>
            I created a favicon in <a href="https://www.gimp.org/">GIMP</a>, the GNU Image Manipulation Tool.
        </p>
        <div class="center-container">
            <img class="_centered pixelated-img" src="/media/favicon.png" width="100" height="100">
        </div>
        <p>The slideshow (JS/CSS for the slideshow implemented myself) below demonstrates the steps taken in
            creating the favicon</p>
        <div class="_center-container">
        <div id="png-slide-show" class="slide-show _centered">
            <div class="slide-show__buttonset">
                <button class="slide-show__button slide-show__button--prev">&#10094;</button>
                <button class="slide-show__button slide-show__button--next">&#10095;</button>
            </div>
            <div class="slide-show__caption"></div>
            <img class="pixelated-img slide-show__image" width="100" height="100" src="/media/favicon.png" alt="The
            final favicon (scaled without interpolation to show the pixel layout)">
            <img class="slide-show__image" src="/media/clippings/gpick-color-palette.png" alt="I used GPick
            to
            pull
            colours out of a scheme I generated online, this allowed me to save the palette in a .GPL format used by
            GIMP and Inkscape">
            <img class="slide-show__image" src="/media/clippings/favicon-font-choice.png" alt="I wanted a
            handdrawn
            like font so investigated options online resulting in the choice of a font called 'Architects daughter'.
            I loaded this into my system by copying it into ~/.fonts/ and running `fc-cache -fv`">
            <img class="slide-show__image" src="/media/clippings/favicon-drop-shadow-application.png"
                 alt="After creating the outline of a whiteboard, I wanted a drop shadow to make it look a little
                 more 3D. I used the drop shadow filter to with 2x2 px offset">
            <img class="slide-show__image" src="/media/clippings/favicon-drop-shadow.png" alt="This is the result
            after adding the drop shadow">
            <img class="slide-show__image" src="/media/clippings/favicon-layers.png" alt="I used layers to aid the
            work during design, it allowed me to try different things and bin them quickly by deleting whole layers.
            I also used layer transparency after applying the linear gradient to get a more subdued background.">
            <img class="slide-show__image" src="/media/clippings/favicon-linear-gradient.png" alt="The white
            background of the board looked a bit dull so I used the linear gradient tool to produce a bit more colour
             variation on the favicon.">
            <img class="pixelated-img slide-show__image" width="100" height="100"
                 src="/media/clippings/favicon-font-no-aa-small.png" alt="I experimented with toggling
                 anti-aliasing on the font to see whether it improved the look. At larger sizes I preferred the
                 aliased font, but at smaller sizes the anti-aliased look better">
            <img class="slide-show__image" src="/media/clippings/favicon-font-no-aa.png" alt="Favicon zoomed without
            AA">
            <img class="pixelated-img slide-show__image" width="100" height="100"
                 src="/media/clippings/favicon-font-aa-small.png" alt="Favicon AA">
            <img class="slide-show__image" src="/media/clippings/favicon-font-aa.png" alt="Favicon zoomed with AA">
        </div>
        </div>
    </section>


    <section>
        <h1>SVG</h1>
        <p>
            I used Inkscape to create an SVG logo of CollaBoard. Despite its simplicity I spent quite a lot of time
            going through tutorials and learning techniques testing out different styles until I found something that
            suited the minimal aesthetic I was aiming for. I made two logos the first seemed too unfriendly so I
            redesigned it using a warmer colour palette
        </p>

        <div class="_center-container">
            <img class="_centered" src="../media/old-logo.svg" alt="CollaBoard logo">
            <p class="caption">Old logo</p>
        </div>
        <div class="_center-container">
            <img class="_centered" src="../media/logo.svg" alt="CollaBoard logo">
            <p class="caption">New logo</p>
        </div>

        <p>The slideshow below demonstrates the sequence of steps I used to produce the new logo</p>
        <div id="svg-slide-show" class="slide-show">
            <div class="slide-show__buttonset">
                <button class="slide-show__button slide-show__button--prev">&#10094;</button>
                <button class="slide-show__button slide-show__button--next">&#10095;</button>
            </div>
            <div class="slide-show__caption"></div>
            <img class="slide-show__image" src="/media/clippings/inkscape-palette-loaded.png" alt="The GPL colour
            palette was loaded by copying the palette file into ~/.config/inkscape/palettes/ and selecting it from
            the drop down menu - user friendly!">
            <img class="slide-show__image" src="/media/clippings/inkscape-rounded-rectangle.png" alt="I wanted a
            whiteboard on which to write the product's name. The rectangle tool was used to create a rectangle
            and the rounded corners selector was used to ease the harsh edges">
            <img class="slide-show__image" src="/media/clippings/inkscape-board-colours.png" alt="I changed the
            colours of the board to those in the palette by use of the fill and stroke settings">
            <img class="slide-show__image" src="/media/clippings/inkscape-text.png" alt="I wanted collaboard to be
            written like it was hand written, albeit with more regularity. I found a font called 'Architects
            daughter' that severed this purpose well">
            <img class="slide-show__image" src="/media/clippings/inkscape-text-kerning.png" alt="Once I scaled the
            text to the desired size I was unhappy at the weight of the font, I wanted it to be like it was drawn
            with a fatter marker. The font didn't have different weights so instead I had to emulate this. To fatten the
            text I first manually adjusted the kerning to increase the spacing between letters so that the resulting
            text once enlarged would have correct kerning. I also adjusted the height and rotation of some of the
            letters to introduce a bit of irregularity which handwritten text would exhibit.">
            <img class="slide-show__image" src="/media/clippings/inkscape-text-dynamic-offset.png" alt="I used the
            dynamic offset path tool after converting the text to a path to 'fatten' the text up">
            <img class="slide-show__image" src="/media/clippings/inkscape-text-dynamic-rotate.png" alt="I then rotated
                 the text path using the transform tool by 15 degrees to allow enlaring the text to take up more of the
                 board">
            <img class="slide-show__image" src="/media/clippings/inkscape-wiggle-line-hard.png" alt="At this stage I
            felt the logo lacked personality so I wanted to add a playful scribble at the bottom left. To this I
            created a zig-zag with the bezier tool which I then later smoothed.">
            <img class="slide-show__image" src="/media/clippings/inkscape-wiggle-line-bottom-symmetric.png" alt="To
            smoothen the zig zag I used 'Make node symmetric' which introduced converted the node to a
            piece of a first-order bezier path (control points form a tanget at the point)">
            <img class="slide-show__image" src="/media/clippings/inkscape-wiggle-line-top-symmetric.png" alt="Using
            the same technique I smoothed the top zig-zags">
            <img class="slide-show__image" src="/media/clippings/inkscape-wiggle-line-tweaking-bezier-control-points.png"
                 alt="Finally I fine-tweaked the path to look like a scribble one would naturally draw on a
            whiteboard">
        </div>

        <h2>Resources used</h2>
        <ul>
            <li><a href="https://inkscape.org/en/doc/tutorials/basic/tutorial-basic.en.html">Inkscape tutorial:
                    Basic</a></li>
            <li><a href="https://inkscape.org/en/doc/tutorials/basic/tutorial-shapes.en.html">Inkscape tutorial:
                    Shapes</a></li>
            <li><a href="https://inkscape.org/en/doc/tutorials/basic/tutorial-advanced.en.html">Inkscape tutorial:
                    Advanced</a></li>
            <li><a href="https://inkscape.org/en/doc/tutorials/basic/tutorial-elements.en.html">Inkscape tutorial:
                    Elements of design</a></li>
        </ul>
    </section>


    <section>
        <h1>Server</h1>

        <h2>Code and patterns</h2>
        <p>The server is built on <a href="https://expressjs.com/">ExpressJS</a>, a basic bare-bones web server
            providing routing functionality. I also made use of
            <a href="https://github.com/HenningM/express-ws">express-ws</a>, a middle-ware package for adding
            websocket support to the server (mediated by the use of <a href="https://github .com/websockets/ws">ws</a>,
            the standard websocket js library).
        </p>

        <p>The server can be divided into two aspects, the static site server and the WebSockets whiteboard app. The
            static site server makes use of <a href="http://ejs.co/">EJS</a> for templating needs. The static pages
            are defined in <a href="/view-src/server/pages.js">pages.js</a>
        </p>

        <p>The server is built on the standard enterprise web application architecture with a three tier structure:
            controller, domain and repository. The controller layer is composed of ExpressJS routers that handle
            requests for static pages--nothing more complicated is necessary. A dynamic controller for the
        <code>/view-src</code> route is used to read and inject source code into an HTML page with highlighting for
        reference in this report (for your reading pleasure!). We use WebSocket communication from the whiteboard
        app to enable real-time inter-person communication. Since WebSockets have no standard protocol of their own
        (ignoring STUMP) I created my own protocol, messages are sent as JSON payloads with a <code>command</code> and
        <code>data</code> field. The <code>data</code> field's structure is dependent upon the command. I created a
        controller layer for the incoming WebSockets. When a message is received, it is parsed from JSON and the
        controller method corresponding to the <code>command</code> field is invoked based on a callback lookup table
        held by the controller; this gives an experience to writing controller methods similar to those for HTTP
        requests.
        </p>

        <h2>Testing & Continuous Integration</h2>
        <p>I developed my code using TDD using the <a>Mocha</a> test-suite library and <a>chai</a> assertion library.
        I used <a>sinon</a> to mock dependencies which were injected into constructors (dependency injection through
            constructor injection) and checked expected interactions took place.
        </p>
        <p>To ensure the integrity of the project was upheld, the unit tests were run on a git check-in by
            Travis CI. The unit tests were run, the HTML validated and the client side JS compiled into a bundle
            using Webpack.</p>


        <h2>Deployment</h2>
        <p>On git check-in to github Travis CI would pull the repository, install the dependencies, run the unit tests
            and HTML validation suite. Providing the tests passed the website would be bundled into a Heroku 'slug'
            and deployed to a Heroku instance therefore achieving a continuous-delivery pipeline ensuring quality and
            speedy delivery.</p>

        <h2>Files of interest</h2>
        <ul>
            <li><a href="/view-src/server/app.js">app.js</a> - route definitions</li>
            <li><a href="/view-src/server/controllers/whiteboard_ws_controller.js">whiteboard_ws_controller.js</a> -
                WebSocket command controller</li>
        </ul>
    </section>


    <section>
        <h1>Database</h1>
        <p>Following the standard 3 tier web architecture, I wrapped my database operations in classes using the
            repository pattern. I wrote integration tests using a SQLite in memory database which proved remarkably
            quick. I used the node-sqlite package  which wraps node-sqlite3 in promises as repetitively wrapping the
            normal functions in promises proved tiresome (and not DRY), rather than doing this myself I elected to
            use a library as I wouldn't have learnt much.</p>

        <h2>Files of interest</h2>
        <ul>
            <li><a href="/view-src/server/setup_db.sql">setup_db.sql</a> - Defines tables for database</li>
            <li><a href="/view-src/server/repositories/board_repository.js">board_repository.js</a> - JS Class
                wrapping DB access</li>
        </ul>
    </section>


    <section>
        <h1>Dynamic pages</h1>
        <p>I used EJS for server side page creation, although the whiteboard app component does some HTML
            manipulation on the client side</p>


        <h2>Files of interest</h2>
        <ul>
            <li><a href="/view-src/server/pages.js">pages.js</a> - Definition of static pages</li>
        </ul>
    </section>


    <section>
        <p>Marking criteria:</p>
        <ul>
            <li>? means you don't want to estimate</li>
            <li>X (0) means you have done nothing in this area</li>
            <li>D (4) means you started but got stuck or ran out of time</li>
            <li>C (5) means you have done basic work</li>
            <li>B (6) means you have done some solid work</li>
            <li>A (7) means you have done sophisticated or extensive work</li>
        </ul>

        <table>
            <thead>
            <tr>
                <th>Section</th>
                <th>Grade</th>
                <th>Mark</th>
                <th>Guidance</th>
            </tr>
            </thead>
            <tbody>
            <tr>
                <td>HTML</td>
                <td>A</td>
                <td>7</td>
                <td>
                    <ul>
                        <li>C means you've got a page or two to work</li>
                        <li>B means you've used XHTML delivery, or a validator, to make sure your pages
                            are correct
                        </li>
                        <li>A means you have investigated a variety of different issues and gained a
                            general high level of confidence with the structure of HTML pages (or with
                            generating HTML via a framework)
                        </li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>CSS</td>
                <td>A</td>
                <td>7</td>
                <td>
                    <ul>
                        <li>C means you've got some style to work</li>
                        <li>B means you've made sure there are no style tags or style attributes in
                            your HTML pages, and you've gained some experience with stylesheets
                        </li>
                        <li>A means you have investigated a variety of different issues and gained a
                            general high level of confidence with CSS style (or with
                            generating CSS via a framework)
                        </li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>JS</td>
                <td>A</td>
                <td>7</td>
                <td>
                    <ul>
                        <li>C means you've got some scripting to work, by writing a small amount of
                            JavaScript, or by slightly adapting a script you found, or by closely following
                            a tutorial
                        </li>
                        <li>B means you've written a substantial script yourself, or written a number
                            of script functions with different issues involved, or gained a medium amount
                            of experience with client-side frameworks
                        </li>
                        <li>A means you have gained a high level of understanding of how client-side
                            JavaScript works, or a high level of expertise in using client-side
                            frameworks
                        </li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>PNG</td>
                <td>X</td>
                <td>7</td>
                <td>
                    <ul>
                        <li>C means you've sorted out basic skills such as converting images to PNG,
                            cropping away unwanted edges, changing resoluation
                        </li>
                        <li>B means you've gained experience with some basic tools such as using
                            filters or changing colours or combining existing images or creating simple
                            shapes or filling
                        </li>
                        <li>A means you have gained experience with some more sophisticated tools such
                            as handling layers and transparency, or airbrushing or creating original
                            artwork
                        </li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>SVG</td>
                <td>A</td>
                <td>7</td>
                <td>
                    <ul>

                        <li>C means you've created a basic drawing in Inkscape, probably by copying
                            something else
                        </li>
                        <li>B means you've gained experience with some of Inkscape's features such as
                            shape tools, freehand drawing, simplification
                        </li>
                        <li>A means you have gained a higher level of experience, e.g. with path
                            editing, grouping, transformations, gradients, patterns, etc., or put a lot of
                            effort into vector artwork
                        </li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Server</td>
                <td>A</td>
                <td>7</td>
                <td>

                    <ul>
                        <li>C means you've created a server by minimally adapting the one provided, or
                            closely following a tutorial to set up express
                        </li>
                        <li>B means you've dealt with things like port numbers, URL validation, content
                            negotiation for old browsers, sending redirections to browsers, handling
                            UTF-8
                        </li>
                        <li>A means you've dealt with things like https and certificates, or web
                            sockets, or cloud hosting, or security issues beyond URL validation, or
                            auto-testing, or cookies, or running under reduced privilege
                        </li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Database</td>
                <td>A</td>
                <td>7</td>
                <td>
                    <ul>
                        <li>C means you've manually created a database, and then extracted data from it
                            in your server
                        </li>
                        <li>B means you've managed to update or insert data as well as extract it, and
                            you've got the hang of callbacks for getting things to happen in the right
                            order
                        </li>
                        <li>A means you've gained a lot of experience with SQL, or you've put a lot of
                            effort into organising database access (e.g. into a separate server-side
                            module) or you've put a lot of effort into database design or details of
                            handling your data
                        </li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Dynamic pages</td>
                <td>A</td>
                <td>7</td>
                <td>
                    <ul>
                        <li>C means you've created a simple dynamic delivery system or you have used a
                            framework in a simple way
                        </li>
                        <li>B means you've organised dynamic delivery in a more sophisticated way,
                            either doing more of your own programming or using more features of a
                            framework
                        </li>
                        <li>A means you've put in a lot of programming effort or become very fluent in
                            using your chosen framework
                        </li>
                    </ul>
                </td>
            </tr>
            <tr>
                <td>Depth (out of 40)</td>
                <td>30</td>
                <td></td>
                <td>
                    For depth,
                    you might want to write something longer which explains your overall aims and
                    design, anything you are particularly proud of, anything I might miss when I am
                    browsing your site, and anything which took a substantial amount of time and
                    effort but didn't make it into the site.
                </td>
            </tr>
            </tbody>
            <tfoot>
            <tr>
                <td>-</td>
                <td>56 + depth/120</td>
                <td>-</td>
                <td>-</td>
            </tr>
            </tfoot>
        </table>
    </section>

    <section>
        <h1>Supporting libraries</h1>
        <p>The following libraries have been used in the project</p>
        <ul>
            <li><a href="https://expressjs.com/">Express</a>: NodeJS based webserver used for HTTP backend</li>
        </ul>
    </section>
    <section>
        <h1>Resources used</h1>
        <ul>
            <li><a href="https://developer.mozilla.org/en-US/">MDN</a>: For all HTML/CSS/JS reference needs</li>
            <li><a href="https://github.com/christianalfoni/webpack-express-boilerplate">Webpack express boilerplate
                    repo</a> Reference for how to integrate express and webpack for local development needs
            </li>
        </ul>
    </section>
    <section>
        <h1>Closing notes</h1>
        <p>I didn't get as far as I wanted</p>
    </section>
</div>
